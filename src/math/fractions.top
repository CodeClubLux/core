
type Fraction =
    numerator: int
    denominator: int

def Fraction.toString(self) string =
    if self.denominator == 1 then
        "{self.numerator}"
    else
        "{self.numerator}/{self.denominator}"

def Fraction.op_add(self, other: Fraction) Fraction =
    let common = lcm self.denominator, other.denominator
    let x = self.scale common
    let y = other.scale common

    Fraction{
        x.numerator + y.numerator,
        common
    }.simplify!

def Fraction.scale(self, den: int) Fraction =
    let by = (toFloat den) / (toFloat self.denominator)
    Fraction{
        toInt (toFloat self.numerator) * by
        , den
    }

def Fraction.op_sub(self, other: Fraction) Fraction =
    let common = lcm self.denominator, other.denominator
    let x = self.scale common
    let y = other.scale common

    Fraction{
        x.numerator - y.numerator,
        common
    }.simplify!

def Fraction.op_mul(x, y: Fraction) Fraction =
    Fraction{
        x.numerator * y.numerator,
        x.denominator * y.denominator
    }.simplify!

def Fraction.invert(x) Fraction =
    Fraction{
        x.denominator
        , x.numerator
    }.simplify!

def Fraction.simplify(x) Fraction =
    let common = x.denominator / hcf x.numerator, x.denominator
    x.scale common


def Fraction.op_div(x, y: Fraction) Fraction =
    (x.invert! * y).simplify!

def Fraction.op_gt(self, other: Fraction) bool =
    let common = lcm self.denominator, other.denominator
    let x = self.scale common
    let y = other.scale common
    x.numerator > y.numerator

def Fraction.op_lt(self, other: Fraction) bool =
    other > self

def Fraction.toInt(self) int =
    self.numerator / self.denominator

def Fraction.toFloat(self) float =
    (toFloat self.numerator) / toFloat self.denominator

